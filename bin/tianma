#! /usr/bin/env node

var bootstrap = require('./bootstrap'),
	commander = require('commander'),
	version = require('../package.json').version;

var bingo = false; // Is Command parameters accepted.

commander
	.version(version)
	.usage('<command> [dir] [options]');

commander
	.command('deploy [dir]')
	.description('Deploy default website to [dir]')
	.action(function (dir) {
		bingo = true;
		require('./deploy')(dir || '.');
	});

commander
	.command('express [dir]')
	.description('Run express service at [dir]')
	.action(function (dir) {
		bingo = true;
		require('./express')(dir || '.');
	});

commander
	.command('run [config]')
	.description('Start a front service')
	.action(function (config) {
		bingo = true;
		require('./nodectl').run(config || 'config.js');
	});

commander
	.command('start [config]')
	.description('Start a background service')
	.action(function (config) {
		bingo = true;
		require('./nodectl').start(config || 'config.js');
	});

commander
	.command('stop')
	.description('Stop current background service')
	.action(function () {
		bingo = true;
		require('./nodectl').stop();
	});

commander
	.command('restart')
	.description('Restart current background service')
	.action(function () {
		bingo = true;
		require('./nodectl').restart('config.js');
	});

commander
	.command('ca <hostname> [dir]')
	.description('Generate ssl certificates for <hostname>')
	.action(function (hostname, dir) {
		bingo = true;
		require('./ca')(hostname, dir || '.');
	});

commander
	.command('libpath')
	.description('Print global lib path')
	.action(function () {
		bingo = true;
		console.log(require('./nodectl').generateNodePath());
	});

commander
	.command('help')
	.description('Display help information')
	.action(function () {
		bingo = true;
		commander.help();
	});
	
bootstrap(function () {
	commander
		.parse(process.argv);

	if (!bingo) {
		console.log('Type \'tianma help\' for usage.');
	}
});
